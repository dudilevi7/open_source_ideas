{"version":3,"sources":["utils/issuesHelper.js","Components/Comments/Comments.js","Components/Issues/Issues.js","Components/Logo/Logo.js","App.js","serviceWorker.js","index.js"],"names":["getFixTags","issue","tags","labels","forEach","label","name","Comments","props","_isMounted","fetchComments","url","req","Request","fetch","then","response","json","data","setState","comments","state","this","Spinner","animation","commentsTemp","commentsArr","map","user","i","key","login","body","id","created_at","Component","marked","require","Issues","fetchIssues","issues","onCommentsClick","index","currIndex","issuesTemp","issuesArr","Card","style","margin","Body","Title","title","color","dangerouslySetInnerHTML","__html","Button","onClick","window","open","html_url","focus","comments_url","Logo","backgroundColor","paddingTop","fontSize","easings","easeOutExpo","App","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3145a1c5.chunk.js","sourcesContent":["\r\nexport const getFixTags = (issue) =>{\r\n        var tags = \"\";\r\n        var labels = issue.labels;\r\n        labels.forEach(label => {\r\n            tags+=\"<a href=\"+\"#\"+\">\"+label.name+\"</a>\"+\"\\xa0\\xa0\\xa0\";\r\n        });\r\n        return tags ;\r\n}\r\n","import React , {Component} from 'react';\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport './Comments.css';\r\n\r\nclass Comments extends Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            comments : {}\r\n         };\r\n    }\r\n    componentDidMount() {\r\n        this._isMounted = true;\r\n        if (this._isMounted) \r\n            this.fetchComments();\r\n    }\r\n    componentWillUnmount(){\r\n        this._isMounted = false;\r\n    }\r\n    fetchComments = () => {\r\n        var url = this.props.url;\r\n        var req = new Request(url);\r\n        fetch(req)\r\n        .then(response => response.json())\r\n        .then(data => this.setState({comments : data}));\r\n    }\r\n    render() {\r\n        if(!this.state.comments[0]) return  <Spinner animation=\"border\" />\r\n        var commentsTemp = this.state.comments;\r\n        const commentsArr = commentsTemp.map((user,i)=>{\r\n            return (\r\n                <div key={i}>\r\n                    <h5>{commentsTemp[i].user.login}</h5>\r\n                    {commentsTemp[i].body}\r\n                    <div id = \"time\">{commentsTemp[i].created_at}</div>\r\n                    <hr></hr>\r\n                </div>\r\n            )\r\n        });\r\n        return (\r\n            <div id = \"commentsContainer\">\r\n             {commentsArr}\r\n             </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Comments;","import React, { Component } from 'react';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Collapse from 'react-bootstrap/Collapse'\r\nimport Spinner from 'react-bootstrap/Spinner';\r\nimport { getFixTags } from '../../utils/issuesHelper';\r\nimport './Issues.css'\r\nimport Comments from '../Comments/Comments';\r\nvar marked = require('marked')\r\nclass Issues extends  Component {\r\n    _isMounted = false;\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {  \r\n           issues : {},\r\n           currIndex : ''\r\n        };\r\n    }\r\n    componentDidMount(){\r\n        this._isMounted = true;\r\n        this.fetchIssues();\r\n    }\r\n    componentWillUnmount(){\r\n        this._isMounted = false;\r\n    }\r\n    fetchIssues = () => {\r\n        var url = \"https://api.github.com/repos/open-source-ideas/open-source-ideas/issues\";\r\n        var req = new Request(url);\r\n        fetch(req)\r\n        .then(response => response.json())\r\n        .then(data => {\r\n            if (this._isMounted){\r\n\t\t\t\tthis.setState({issues : data})\r\n\t\t\t}\r\n        })\r\n    }\r\n    onCommentsClick = (comments,index)=> {\r\n        if(comments!==0 && this.state.currIndex!==index)\r\n        this.setState({currIndex : index});\r\n        else this.setState({currIndex : \"\"});\r\n    }\r\n    render() {\r\n        if(!this.state.issues[0]) return  <Spinner animation=\"border\" />\r\n        var issuesTemp = this.state.issues;\r\n\r\n        const issuesArr = issuesTemp.map((user,i)=>{\r\n            return (\r\n                    <Card id = \"issue\" style = {{margin : '20px' }} key ={i}>\r\n                    <Card.Body>\r\n                        <Card.Title id = \"issueTitle\" >{issuesTemp[i].title}</Card.Title>\r\n                        <div style ={{color : '#ff0000', margin :'15px' }} \r\n                             dangerouslySetInnerHTML = {{__html : marked(getFixTags(issuesTemp[i]))}}></div>              \r\n                        <div id = \"bodyText\" style = {{margin : '10px'}}\r\n                             dangerouslySetInnerHTML = {{__html : marked(issuesTemp[i].body)}}></div>\r\n                        <div id = 'buttons'>\r\n                          <Button onClick = {()=> this.onCommentsClick(issuesTemp[i].comments,i)}>{issuesTemp[i].comments} comments</Button>\r\n                          <Button onClick ={()=>window.open(issuesTemp[i].html_url, '_blank').focus()}>View on GitHub</Button>\r\n                        </div>\r\n                        {this.state.currIndex === i ? \r\n                                <div id={\"div\"+i} style = {{margin : '10px'}}>\r\n                                  <Comments url = {issuesTemp[i].comments_url}/>\r\n                                </div> \r\n                         : \"\"}\r\n                    </Card.Body>\r\n                    </Card>\r\n            );\r\n        });\r\n        return (\r\n            <div id = \"issuesContainer\">\r\n              {issuesArr}\r\n             </div>\r\n        );\r\n    }\r\n}\r\nexport default Issues;\r\n","import React , {Component} from 'react';\r\nimport {easings} from 'react-animation';\r\nclass Logo extends Component {\r\n    state = {  }\r\n    render() {\r\n        return (\r\n            <div style ={{backgroundColor : 'black'}}> \r\n                <h1 style = {{paddingTop:'5px',fontSize : '45px' ,color : 'white',animation : `pop-in ${easings.easeOutExpo} 3000ms forwards`}}>Open Source Ideas</h1>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Logo;","import React, { Component } from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Issues from './Components/Issues/Issues';\nimport Logo from './Components/Logo/Logo';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      \n      };\n  }\n  render() {\n    return (\n    <div className=\"App\">\n      <Logo/>\n      <Issues/>\n    </div>\n    );\n  }\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}